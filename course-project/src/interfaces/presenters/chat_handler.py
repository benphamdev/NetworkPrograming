"""
ChatHandler - Qu·∫£n l√Ω h·ªôi tho·∫°i chat v·ªõi ng∆∞·ªùi d√πng v·ªÅ ph√¢n t√≠ch m·∫°ng.
"""
from typing import Dict, List
import os
from src.interfaces.gateways.smolagent_gateway import SmolagentGateway
from src.interfaces.presenters.summary_creator import SummaryCreator

class ChatHandler:
    """Qu·∫£n l√Ω h·ªôi tho·∫°i chat v·ªõi ng∆∞·ªùi d√πng v·ªÅ ph√¢n t√≠ch m·∫°ng."""
    
    def __init__(self, latest_pcap_file=None):
        """
        Kh·ªüi t·∫°o chat handler.
        
        Args:
            latest_pcap_file: ƒê∆∞·ªùng d·∫´n ƒë·∫øn file PCAP hi·ªán t·∫°i (n·∫øu c√≥)
        """
        self.chat_history = []
        self.latest_pcap_file = latest_pcap_file
        self.smolagent_gateway = SmolagentGateway()
        self.summary_creator = SummaryCreator()
    
    def create_ai_chat_response(self, query: str, results: Dict) -> str:
        """
        T·∫°o ph·∫£n h·ªìi cho h·ªôi tho·∫°i chat d·ª±a tr√™n truy v·∫•n c·ªßa ng∆∞·ªùi d√πng v√† k·∫øt qu·∫£ ph√¢n t√≠ch t·ª´ file PCAP.
        
        Args:
            query: Truy v·∫•n c·ªßa ng∆∞·ªùi d√πng
            results: K·∫øt qu·∫£ ph√¢n t√≠ch PCAP t·ª´ file ƒë√£ t·∫£i l√™n
            
        Returns:
            Ph·∫£n h·ªìi ƒë∆∞·ª£c t·∫°o b·ªüi AI
        """
        if not results:
            return "T√¥i kh√¥ng c√≥ d·ªØ li·ªáu n√†o ƒë·ªÉ ph√¢n t√≠ch. Vui l√≤ng t·∫£i l√™n file PCAP tr∆∞·ªõc."

        query_lower = query.lower()

        # X·ª≠ l√Ω truy v·∫•n v·ªÅ file c·ª• th·ªÉ
        if "file n√†y" in query_lower or "d·ªØ li·ªáu n√†y" in query_lower or "pcap n√†y" in query_lower:
            # Logic x·ª≠ l√Ω truy v·∫•n v·ªÅ file hi·ªán t·∫°i
            file_name = os.path.basename(self.latest_pcap_file) if self.latest_pcap_file else "kh√¥ng x√°c ƒë·ªãnh"

            if "c√≥ g√¨" in query_lower or "ch·ª©a g√¨" in query_lower or "t√≥m t·∫Øt" in query_lower:
                return self.summary_creator.create_file_summary(results, file_name)

        # X·ª≠ l√Ω truy v·∫•n v·ªÅ m√¥ h√¨nh OSI
        if "osi" in query_lower or "m√¥ h√¨nh osi" in query_lower:
            # G·ªçi ph√¢n t√≠ch OSI t·ª´ SmolagentGateway
            osi_analysis = self._get_osi_analysis(results)
            file_name = os.path.basename(self.latest_pcap_file) if self.latest_pcap_file else "ƒë√£ t·∫£i l√™n"
            return f"Ph√¢n t√≠ch l∆∞u l∆∞·ª£ng m·∫°ng theo m√¥ h√¨nh OSI t·ª´ file {file_name}:\n\n{osi_analysis}"
            
        # G·ªçi tr·ª±c ti·∫øp ƒë·∫øn deepseek model (tr∆∞·ªùng h·ª£p m·∫∑c ƒë·ªãnh)
        try:
            # G·ªçi tr·ª±c ti·∫øp ƒë·∫øn deepseek model th√¥ng qua ph∆∞∆°ng th·ª©c direct_query
            return self.smolagent_gateway.direct_query(query)
        except Exception as e:
            # N·∫øu c√≥ l·ªói, s·ª≠ d·ª•ng ph·∫£n h·ªìi m·∫∑c ƒë·ªãnh
            file_name = os.path.basename(self.latest_pcap_file) if self.latest_pcap_file else "ƒë√£ t·∫£i l√™n"
            return (
                f"T√¥i c√≥ th·ªÉ cung c·∫•p ph√¢n t√≠ch chi ti·∫øt v·ªÅ file PCAP {file_name}. "
                "H√£y h·ªèi t√¥i v·ªÅ: t·∫•n c√¥ng ph√°t hi·ªán ƒë∆∞·ª£c, ph√¢n t√≠ch m·∫°ng theo m√¥ h√¨nh OSI, ph√¢n b·ªë giao th·ª©c, "
                "r·ªßi ro m·∫°ng, ho·∫∑c bi·ªán ph√°p gi·∫£m thi·ªÉu t·∫•n c√¥ng."
            )
    
    def _get_osi_analysis(self, results: Dict) -> str:
        """
        L·∫•y ph√¢n t√≠ch theo m√¥ h√¨nh OSI t·ª´ SmolagentGateway.
        
        Args:
            results: K·∫øt qu·∫£ ph√¢n t√≠ch PCAP
            
        Returns:
            Ph√¢n t√≠ch theo m√¥ h√¨nh OSI
        """
        try:
            # G·ªçi smolagent_gateway ƒë·ªÉ ph√¢n t√≠ch
            osi_analysis = self.smolagent_gateway.analyze_osi_layers(results)
            
            # Ki·ªÉm tra k·∫øt qu·∫£ v√† tr·∫£ v·ªÅ ph√¢n t√≠ch
            if isinstance(osi_analysis, dict) and "analysis" in osi_analysis:
                return osi_analysis["analysis"]
            elif isinstance(osi_analysis, str):
                return osi_analysis
            else:
                return "## Ph√¢n t√≠ch theo m√¥ h√¨nh OSI\n\n" + str(osi_analysis)
        except Exception as e:
            return f"## L·ªói khi ph√¢n t√≠ch theo m√¥ h√¨nh OSI\n\nƒê√£ x·∫£y ra l·ªói khi ph√¢n t√≠ch: {str(e)}"
    
    def update_chat_history(self, query: str, results: Dict) -> List[Dict[str, str]]:
        """
        C·∫≠p nh·∫≠t l·ªãch s·ª≠ chat v√† tr·∫£ v·ªÅ ph·∫£n h·ªìi m·ªõi.
        
        Args:
            query: Truy v·∫•n c·ªßa ng∆∞·ªùi d√πng
            results: K·∫øt qu·∫£ ph√¢n t√≠ch PCAP
            
        Returns:
            L·ªãch s·ª≠ chat ƒë√£ c·∫≠p nh·∫≠t
        """
        # N·∫øu l√† truy v·∫•n ƒë·∫ßu ti√™n v√† chat_history tr·ªëng, th√™m tin nh·∫Øn ch√†o m·ª´ng
        if not self.chat_history:
            welcome_message = self.get_initial_chat_message(results)
            self.chat_history.append({"role": "assistant", "content": welcome_message})

        # Th√™m tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng v√†o l·ªãch s·ª≠
        self.chat_history.append({"role": "user", "content": query})

        # T·∫°o ph·∫£n h·ªìi
        response = self.create_ai_chat_response(query, results)

        # Th√™m ph·∫£n h·ªìi v√†o l·ªãch s·ª≠
        self.chat_history.append({"role": "assistant", "content": response})

        # Tr·∫£ v·ªÅ l·ªãch s·ª≠ chat ƒë√£ c·∫≠p nh·∫≠t
        return self.chat_history
    
    def get_initial_chat_message(self, results: Dict) -> str:
        """
        T·∫°o tin nh·∫Øn ban ƒë·∫ßu cho chat box d·ª±a tr√™n k·∫øt qu·∫£ ph√¢n t√≠ch.
        
        Args:
            results: K·∫øt qu·∫£ ph√¢n t√≠ch PCAP
            
        Returns:
            Tin nh·∫Øn ch√†o m·ª´ng ban ƒë·∫ßu
        """
        if not results:
            return "Ch√†o b·∫°n! T√¥i l√† tr·ª£ l√Ω ph√¢n t√≠ch m·∫°ng. Vui l√≤ng t·∫£i l√™n file PCAP ƒë·ªÉ b·∫Øt ƒë·∫ßu ph√¢n t√≠ch."

        # T·∫°o tin nh·∫Øn ch√†o m·ª´ng v·ªõi t·ªïng quan
        message = "Ch√†o b·∫°n! T√¥i ƒë√£ ph√¢n t√≠ch xong file PCAP c·ªßa b·∫°n.\n\n"

        # Th√™m th√¥ng tin t·ªïng quan v·ªÅ r·ªßi ro
        message += "**T·ªïng quan v·ªÅ an ninh m·∫°ng:**\n\n"

        # Ph√¢n t√≠ch c√°c r·ªßi ro c∆° b·∫£n
        risks_found = False

        # Ki·ªÉm tra t·∫•n c√¥ng
        attacks = results.get("attacks", [])
        if attacks:
            message += f"‚ö†Ô∏è **Ph√°t hi·ªán {len(attacks)} cu·ªôc t·∫•n c√¥ng!** ƒê√¢y l√† r·ªßi ro an ninh cao c·∫ßn x·ª≠ l√Ω ngay.\n\n"
            risks_found = True

            # Ki·ªÉm tra t·∫•n c√¥ng ARP ƒë·∫∑c bi·ªát
            arp_attacks = [a for a in attacks if "ARP" in a.get("attack_type", "")]
            if arp_attacks:
                gateway_attacks = [a for a in arp_attacks if any(ip.endswith(".1") or ip.endswith(".254") for ip in a.get("target_ips", []))]

                if gateway_attacks:
                    message += f"üö® **NGUY HI·ªÇM: Ph√°t hi·ªán {len(gateway_attacks)} t·∫•n c√¥ng ARP nh·∫Øm v√†o gateway!**\n"
                    message += "ƒê√¢y l√† d·∫•u hi·ªáu c·ªßa t·∫•n c√¥ng Man-in-the-Middle c√≥ th·ªÉ ƒë√°nh c·∫Øp th√¥ng tin nh·∫°y c·∫£m.\n\n"
                else:
                    message += f"‚ö†Ô∏è **Ph√°t hi·ªán {len(arp_attacks)} t·∫•n c√¥ng ARP spoofing** c√≥ th·ªÉ d·∫´n ƒë·∫øn t·∫•n c√¥ng Man-in-the-Middle.\n\n"
        else:
            message += "‚úÖ **Kh√¥ng ph√°t hi·ªán t·∫•n c√¥ng n√†o.** ƒêi·ªÅu n√†y t·ªët cho an ninh m·∫°ng c·ªßa b·∫°n.\n\n"

        # Ki·ªÉm tra t·ªâ l·ªá k·∫øt n·ªëi TCP ƒë·∫∑t l·∫°i
        if "flow_statistics" in results:
            flow_stats = results["flow_statistics"]
            total_flows = flow_stats.get("total_flows", 0)
            reset_count = flow_stats.get("reset_count", 0)

            if total_flows > 0:
                reset_percent = (reset_count / total_flows) * 100
                if reset_percent > 20:
                    message += f"‚ö†Ô∏è **T·ª∑ l·ªá k·∫øt n·ªëi ƒë·∫∑t l·∫°i cao: {reset_percent:.1f}%** - C√≥ th·ªÉ c√≥ v·∫•n ƒë·ªÅ v·ªÅ hi·ªáu su·∫•t m·∫°ng.\n\n"
                    risks_found = True

        # T√≥m t·∫Øt r·ªßi ro
        if risks_found:
            message += "C√≥ m·ªôt s·ªë r·ªßi ro m·∫°ng c·∫ßn ƒë∆∞·ª£c xem x√©t. H√£y h·ªèi t√¥i v·ªÅ 'ph√¢n t√≠ch r·ªßi ro m·∫°ng' ƒë·ªÉ bi·∫øt chi ti·∫øt.\n\n"
        else:
            message += "M·∫°ng c·ªßa b·∫°n c√≥ v·∫ª an to√†n d·ª±a tr√™n d·ªØ li·ªáu ƒë√£ ph√¢n t√≠ch. Tuy nhi√™n, vi·ªác gi√°m s√°t li√™n t·ª•c r·∫•t quan tr·ªçng.\n\n"

        # Th√™m h∆∞·ªõng d·∫´n t∆∞∆°ng t√°c
        message += "B·∫°n c√≥ th·ªÉ h·ªèi t√¥i v·ªÅ:\n"
        message += "- Ph√¢n t√≠ch r·ªßi ro m·∫°ng\n"
        message += "- Chi ti·∫øt v·ªÅ c√°c cu·ªôc t·∫•n c√¥ng\n"
        message += "- Ph√¢n t√≠ch l∆∞u l∆∞·ª£ng m·∫°ng theo m√¥ h√¨nh OSI\n"

        # Th√™m g·ª£i √Ω v·ªÅ ARP n·∫øu c√≥ t·∫•n c√¥ng ARP
        if attacks and any("ARP" in a.get("attack_type", "") for a in attacks):
            message += "- Th√¥ng tin v·ªÅ t·∫•n c√¥ng ARP spoofing\n"

        message += "- Bi·ªán ph√°p gi·∫£m thi·ªÉu r·ªßi ro\n"

        # Kh·ªüi t·∫°o l·ªãch s·ª≠ chat
        self.chat_history = [{"role": "assistant", "content": message}]

        return message
    
    def clear_chat_history(self):
        """X√≥a l·ªãch s·ª≠ chat."""
        self.chat_history = [] 