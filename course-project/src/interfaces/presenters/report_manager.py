"""
Report Manager - X·ª≠ l√Ω t·∫°o v√† t·∫£i xu·ªëng b√°o c√°o.
"""
import os

import gradio as gr
import pandas as pd


class ReportManager:
    """Qu·∫£n l√Ω t·∫°o, hi·ªÉn th·ªã v√† t·∫£i xu·ªëng b√°o c√°o ph√¢n t√≠ch."""

    def __init__(self, base_presenter):
        """
        Kh·ªüi t·∫°o Report Manager.
        
        Args:
            base_presenter: BasePresenter instance
        """
        self.base_presenter = base_presenter
        self.output_dir = "reports"

    def export_osi_report(self, analysis_results):
        """
        Xu·∫•t b√°o c√°o ph√¢n t√≠ch OSI
        
        Args:
            analysis_results: Dictionary ch·ª©a k·∫øt qu·∫£ ph√¢n t√≠ch
            
        Returns:
            Tuple (message, reports_dataframe)
        """
        try:
            # Kh·ªüi t·∫°o ReportWriterAgent
            from src.interfaces.gateways.report_writer_agent import ReportWriterAgent
            # Import bi·∫øn to√†n c·ª•c
            from src.interfaces.gateways.smolagent_gateway import LATEST_ANALYSIS_MARKDOWN
            report_writer = ReportWriterAgent(output_dir=self.output_dir)
            
            # S·ª≠ d·ª•ng template cho b√°o c√°o
            from datetime import datetime
            import re
            
            if LATEST_ANALYSIS_MARKDOWN:
                # ƒê·ªçc template
                template_path = "templates/network_analysis_template.md"
                try:
                    with open(template_path, 'r', encoding='utf-8') as f:
                        template = f.read()
                except Exception as e:
                    print(f"Kh√¥ng th·ªÉ ƒë·ªçc template: {str(e)}")
                    template = "# {title}\n\n{osi_analysis}"
                
                # Chu·∫©n b·ªã d·ªØ li·ªáu ƒë·ªÉ ƒëi·ªÅn v√†o template
                now = datetime.now()
                date_str = now.strftime("%d/%m/%Y")
                time_str = now.strftime("%H:%M:%S")
                
                # Tr√≠ch xu·∫•t ph·∫ßn t√≥m t·∫Øt v√† c√°c ph·∫ßn kh√°c t·ª´ markdown ph√¢n t√≠ch
                summary = "Ph√¢n t√≠ch l∆∞u l∆∞·ª£ng m·∫°ng v√† x√°c ƒë·ªãnh c√°c v·∫•n ƒë·ªÅ ti·ªÅm ·∫©n"
                conclusion = "Xem chi ti·∫øt trong ph√¢n t√≠ch ƒë·∫ßy ƒë·ªß"
                
                # C·ªë g·∫Øng tr√≠ch xu·∫•t c√°c ph·∫ßn t·ª´ LATEST_ANALYSIS_MARKDOWN
                summary_match = re.search(r'## T√≥m t·∫Øt\s*\n\n(.*?)(?=\n\n##|\Z)', LATEST_ANALYSIS_MARKDOWN, re.DOTALL)
                if summary_match:
                    summary = summary_match.group(1).strip()
                    
                conclusion_match = re.search(r'## K·∫øt lu·∫≠n\s*\n\n(.*?)(?=\n\n##|\Z)', LATEST_ANALYSIS_MARKDOWN, re.DOTALL)
                if conclusion_match:
                    conclusion = conclusion_match.group(1).strip()
                    
                # T√¨m t·∫•t c·∫£ c√°c v·∫•n ƒë·ªÅ b·∫£o m·∫≠t
                security_issues_rows = ""
                security_issues_pattern = r'\*\*V·∫•n ƒë·ªÅ b·∫£o m·∫≠t:\*\*\s*\n\n(.*?)(?=\n\n\*\*|\n\n##|\Z)'
                security_matches = re.finditer(security_issues_pattern, LATEST_ANALYSIS_MARKDOWN, re.DOTALL)
                for match in security_matches:
                    issues = match.group(1).strip().split('\n')
                    for issue in issues:
                        if issue.startswith('- '):
                            issue = issue[2:]  # B·ªè d·∫•u g·∫°ch ƒë·∫ßu d√≤ng
                            security_issues_rows += f"| {issue} | Cao | Ti·ªÅm ·∫©n r·ªßi ro b·∫£o m·∫≠t |\n"
                
                # T√¨m t·∫•t c·∫£ khuy·∫øn ngh·ªã
                recommendations = ""
                recommendations_pattern = r'\*\*Khuy·∫øn ngh·ªã:\*\*\s*\n\n(.*?)(?=\n\n\*\*|\n\n##|\Z)'
                recommendations_matches = re.finditer(recommendations_pattern, LATEST_ANALYSIS_MARKDOWN, re.DOTALL)
                for match in recommendations_matches:
                    recs = match.group(1).strip()
                    recommendations += recs + "\n\n"
                
                # ƒêi·ªÅn template
                filled_template = template.format(
                    title="B√°o C√°o Ph√¢n T√≠ch OSI",
                    date=date_str,
                    time=time_str,
                    summary=summary,
                    osi_analysis=LATEST_ANALYSIS_MARKDOWN,
                    security_issues=security_issues_rows if security_issues_rows else "| Kh√¥ng ph√°t hi·ªán | - | - |",
                    recommendations=recommendations if recommendations else "Kh√¥ng c√≥ khuy·∫øn ngh·ªã c·ª• th·ªÉ.",
                    conclusion=conclusion
                )
                
                # T·∫°o b√°o c√°o v·ªõi ph√¢n t√≠ch ƒë∆°n gi·∫£n
                report_info = report_writer.generate_report(
                    {"analysis": "Ph√¢n t√≠ch chi ti·∫øt l∆∞u l∆∞·ª£ng m·∫°ng theo m√¥ h√¨nh OSI"},
                    report_title="B√°o C√°o Ph√¢n T√≠ch OSI",
                    include_recommendations=True
                )
                
                # Ghi ƒë√® file markdown b·∫±ng template ƒë√£ ƒëi·ªÅn
                if 'filename' in report_info:
                    md_path = os.path.join(self.output_dir, report_info['filename'])
                    try:
                        with open(md_path, 'w', encoding='utf-8') as f:
                            f.write(filled_template)
                        print(f"ƒê√£ ghi n·ªôi dung template ƒë·∫ßy ƒë·ªß v√†o file {md_path}")
                        return f"‚úÖ ƒê√£ t·∫°o b√°o c√°o th√†nh c√¥ng v·ªõi n·ªôi dung ƒë·∫ßy ƒë·ªß: {report_info['readable_time']}", self.get_reports_dataframe()
                    except Exception as write_error:
                        print(f"L·ªói khi ghi file: {str(write_error)}")
                
                return f"‚úÖ ƒê√£ t·∫°o b√°o c√°o: {report_info['readable_time']}", self.get_reports_dataframe()
                
            # Ph·∫ßn c√≤n l·∫°i gi·ªØ nguy√™n
            if not analysis_results or (isinstance(analysis_results, dict) and len(analysis_results) == 0):
                if self.base_presenter.latest_results:
                    analysis_results = self.base_presenter.latest_results
                else:
                    # N·∫øu kh√¥ng c√≥ k·∫øt qu·∫£ n√†o, t·∫°o b√°o c√°o m·∫´u
                    report_info = report_writer.generate_sample_report()
                    return "ƒê√£ t·∫°o b√°o c√°o m·∫´u do kh√¥ng c√≥ d·ªØ li·ªáu ph√¢n t√≠ch c·ª• th·ªÉ", self.get_reports_dataframe()

            # T·∫°o b√°o c√°o t·ª´ k·∫øt qu·∫£ ph√¢n t√≠ch
            report_info = report_writer.generate_report(
                analysis_results,
                report_title="B√°o C√°o Ph√¢n T√≠ch OSI",
                include_recommendations=True
            )

            return f"‚úÖ ƒê√£ t·∫°o b√°o c√°o th√†nh c√¥ng: {report_info['readable_time']}", self.get_reports_dataframe()
        except Exception as e:
            return f"‚ùå L·ªói khi t·∫°o b√°o c√°o: {str(e)}", []

    def get_reports_dataframe(self):
        """
        L·∫•y danh s√°ch b√°o c√°o d∆∞·ªõi d·∫°ng dataframe v·ªõi n√∫t t·∫£i xu·ªëng v√† x√≥a
        
        Returns:
            List c√°c b√°o c√°o v·ªõi th√¥ng tin ƒë·ªãnh d·∫°ng
        """
        try:
            from src.interfaces.gateways.report_writer_agent import ReportWriterAgent

            report_writer = ReportWriterAgent(output_dir=self.output_dir)
            reports = report_writer.get_report_list()

            if not reports:
                return []  # Tr·∫£ v·ªÅ list r·ªóng n·∫øu kh√¥ng c√≥ b√°o c√°o

            # T·∫°o dataframe ch·ª©a th√¥ng tin b√°o c√°o v√† n√∫t thao t√°c
            data = []
            for report in reports:
                report_id = report['timestamp']
                md_filename = report['filename']
                report_title = report.get('report_title', "B√°o c√°o ph√¢n t√≠ch m·∫°ng")

                # T·∫°o n√∫t t·∫£i xu·ªëng Markdown
                if os.path.exists(os.path.join(self.output_dir, md_filename)):
                    md_link = f"<button style='background-color:#4CAF50; color:white; border:none; padding:5px 10px; border-radius:4px; cursor:pointer;'>üìã T·∫£i Markdown</button>"
                else:
                    md_link = "Kh√¥ng c√≥ file"

                # T·∫°o n√∫t t·∫£i xu·ªëng PDF/HTML
                download_type = report.get('download_type', 'html').upper()
                download_path = report.get('download_path', '')

                if download_path and os.path.exists(os.path.join(self.output_dir, download_path)):
                    icon = "üìä" if download_type.lower() == "pdf" else "üìÑ"
                    download_link = f"<button style='background-color:#2196F3; color:white; border:none; padding:5px 10px; border-radius:4px; cursor:pointer;'>{icon} T·∫£i {download_type}</button>"
                else:
                    download_link = "Kh√¥ng c√≥ file"

                # T·∫°o n√∫t x√≥a
                delete_btn = f"üóëÔ∏è X√≥a_{report_id}"

                # Th√™m v√†o danh s√°ch
                data.append([
                    report['readable_time'],
                    report_title,
                    md_link,
                    download_link,
                    delete_btn
                ])

            return data
        except Exception as e:
            print(f"L·ªói khi l·∫•y danh s√°ch b√°o c√°o: {str(e)}")
            return []

    def download_report(self, report_id, file_type="markdown"):
        """
        T·∫£i xu·ªëng b√°o c√°o theo ID
        
        Args:
            report_id: ID c·ªßa b√°o c√°o c·∫ßn t·∫£i xu·ªëng
            file_type: Lo·∫°i file c·∫ßn t·∫£i xu·ªëng (markdown/pdf/html)
            
        Returns:
            ƒê∆∞·ªùng d·∫´n tuy·ªát ƒë·ªëi ƒë·∫øn file b√°o c√°o
        """
        try:
            from src.interfaces.gateways.report_writer_agent import ReportWriterAgent

            report_writer = ReportWriterAgent(output_dir=self.output_dir)
            reports = report_writer.get_report_list()

            # T√¨m b√°o c√°o theo ID
            target_report = None
            for report in reports:
                if report['timestamp'] == report_id:
                    target_report = report
                    break

            if not target_report:
                print(f"B√°o c√°o kh√¥ng t√¨m th·∫•y v·ªõi ID: {report_id}")
                return f"Kh√¥ng t√¨m th·∫•y b√°o c√°o ID {report_id}"

            # X√°c ƒë·ªãnh file c·∫ßn t·∫£i xu·ªëng
            if file_type.lower() == "markdown":
                file_path = os.path.join(self.output_dir, target_report['filename'])
                file_name = target_report['filename']
            else:
                # S·ª≠ d·ª•ng PDF ho·∫∑c HTML t√πy v√†o c√°i n√†o c√≥ s·∫µn
                download_path = target_report.get('download_path', '')
                if not download_path:
                    print(f"Kh√¥ng c√≥ file ƒë·ªÉ t·∫£i xu·ªëng cho b√°o c√°o ID: {report_id}")
                    return "Kh√¥ng c√≥ file ƒë·ªÉ t·∫£i xu·ªëng"
                file_path = os.path.join(self.output_dir, download_path)
                file_name = download_path

            # Ki·ªÉm tra xem file c√≥ t·ªìn t·∫°i kh√¥ng
            if not os.path.exists(file_path):
                print(f"File kh√¥ng t·ªìn t·∫°i: {file_path}")
                return f"File {file_name} kh√¥ng t·ªìn t·∫°i"

            # ƒê·∫£m b·∫£o tr·∫£ v·ªÅ ƒë∆∞·ªùng d·∫´n tuy·ªát ƒë·ªëi ƒë·ªÉ gradio c√≥ th·ªÉ t√¨m th·∫•y file
            absolute_path = os.path.abspath(file_path)
            print(f"ƒê∆∞·ªùng d·∫´n t·∫£i xu·ªëng: {absolute_path}")

            # Tr·∫£ v·ªÅ ƒë∆∞·ªùng d·∫´n ƒë·ªÉ Gradio t·∫°o li√™n k·∫øt t·∫£i xu·ªëng
            return absolute_path
        except Exception as e:
            print(f"L·ªói khi t·∫£i xu·ªëng b√°o c√°o: {str(e)}")
            return f"L·ªói khi t·∫£i xu·ªëng b√°o c√°o: {str(e)}"

    def handle_reports_click(self, evt: gr.SelectData, reports_data):
        """
        X·ª≠ l√Ω khi ng∆∞·ªùi d√πng click v√†o danh s√°ch b√°o c√°o
        
        Args:
            evt: S·ª± ki·ªán SelectData t·ª´ Gradio
            reports_data: D·ªØ li·ªáu danh s√°ch b√°o c√°o
            
        Returns:
            Tuple (message, updated_reports_dataframe)
        """
        try:
            from src.interfaces.gateways.report_writer_agent import ReportWriterAgent

            # Ki·ªÉm tra n·∫øu reports_data l√† DataFrame ho·∫∑c None
            if reports_data is None:
                return "Kh√¥ng c√≥ b√°o c√°o n√†o", []

            # N·∫øu l√† DataFrame, chuy·ªÉn ƒë·ªïi th√†nh danh s√°ch
            if isinstance(reports_data, pd.DataFrame):
                reports_data = reports_data.values.tolist()
            elif not isinstance(reports_data, list):
                # N·∫øu kh√¥ng ph·∫£i DataFrame ho·∫∑c list, tr·∫£ v·ªÅ l·ªói
                return f"Lo·∫°i d·ªØ li·ªáu kh√¥ng h·ªó tr·ª£: {type(reports_data)}", []

            # Ki·ªÉm tra n·∫øu danh s√°ch tr·ªëng
            if len(reports_data) == 0:
                return "Kh√¥ng c√≥ b√°o c√°o n√†o", []

            # L·∫•y d√≤ng v√† c·ªôt ƒë∆∞·ª£c ch·ªçn
            row_index = evt.index[0] if hasattr(evt, 'index') else 0
            col_index = evt.index[1] if hasattr(evt, 'index') and len(evt.index) > 1 else 0

            if row_index >= len(reports_data):
                return "Ch·ªâ s·ªë d√≤ng kh√¥ng h·ª£p l·ªá", reports_data

            # L·∫•y th√¥ng tin b√°o c√°o ƒë∆∞·ª£c ch·ªçn
            selected_row = reports_data[row_index]
            if len(selected_row) < 5:
                return "D·ªØ li·ªáu b√°o c√°o kh√¥ng h·ª£p l·ªá", reports_data

            # T√°ch ID b√°o c√°o t·ª´ c·ªôt cu·ªëi (n√∫t X√≥a)
            delete_btn_text = selected_row[4]
            if not isinstance(delete_btn_text, str) or not delete_btn_text.startswith("üóëÔ∏è X√≥a_"):
                return "Kh√¥ng th·ªÉ x√°c ƒë·ªãnh ID b√°o c√°o", reports_data

            report_id = delete_btn_text.replace("üóëÔ∏è X√≥a_", "")

            # X·ª≠ l√Ω theo c·ªôt ƒë∆∞·ª£c ch·ªçn
            if col_index == 2:  # C·ªôt "T·∫£i Markdown"
                md_link_text = selected_row[2]
                if md_link_text == "Kh√¥ng c√≥ file":
                    return "Markdown kh√¥ng kh·∫£ d·ª•ng cho b√°o c√°o n√†y", reports_data
                # Tr·∫£ v·ªÅ ƒë∆∞·ªùng d·∫´n file ƒë·ªÉ Gradio t·∫°o li√™n k·∫øt t·∫£i xu·ªëng
                file_path = self.download_report(report_id, "markdown")
                # Ki·ªÉm tra xem ƒë∆∞·ªùng d·∫´n c√≥ h·ª£p l·ªá kh√¥ng
                if isinstance(file_path, str) and os.path.exists(file_path):
                    gr.Info(f"ƒêang t·∫£i xu·ªëng t·ªáp Markdown cho b√°o c√°o {selected_row[1]}")
                    # Tr·∫£ v·ªÅ ƒë∆∞·ªùng d·∫´n file ƒë·ªÉ Gradio t·∫°o n√∫t t·∫£i xu·ªëng
                    return f"File Markdown s·∫µn s√†ng t·∫£i xu·ªëng: {file_path}", reports_data
                else:
                    return f"L·ªói khi t·∫£i file: {file_path}", reports_data

            elif col_index == 3:  # C·ªôt "T·∫£i PDF/HTML"
                pdf_link_text = selected_row[3]
                if pdf_link_text == "Kh√¥ng c√≥ file":
                    return "PDF/HTML kh√¥ng kh·∫£ d·ª•ng cho b√°o c√°o n√†y", reports_data
                # Tr·∫£ v·ªÅ ƒë∆∞·ªùng d·∫´n file ƒë·ªÉ Gradio t·∫°o li√™n k·∫øt t·∫£i xu·ªëng
                file_path = self.download_report(report_id, "pdf")
                # Ki·ªÉm tra xem ƒë∆∞·ªùng d·∫´n c√≥ h·ª£p l·ªá kh√¥ng
                if isinstance(file_path, str) and os.path.exists(file_path):
                    download_type = "PDF" if file_path.endswith(".pdf") else "HTML"
                    gr.Info(f"ƒêang t·∫£i xu·ªëng t·ªáp {download_type} cho b√°o c√°o {selected_row[1]}")
                    # Tr·∫£ v·ªÅ ƒë∆∞·ªùng d·∫´n file ƒë·ªÉ Gradio t·∫°o n√∫t t·∫£i xu·ªëng
                    return f"File {download_type} s·∫µn s√†ng t·∫£i xu·ªëng: {file_path}", reports_data
                else:
                    return f"L·ªói khi t·∫£i file: {file_path}", reports_data

            elif col_index == 4:  # C·ªôt "H√†nh ƒë·ªông" (X√≥a)
                # X√≥a b√°o c√°o
                report_writer = ReportWriterAgent(output_dir=self.output_dir)
                report_writer.delete_report(report_id)
                # C·∫≠p nh·∫≠t l·∫°i danh s√°ch b√°o c√°o
                return f"ƒê√£ x√≥a b√°o c√°o {selected_row[1]}", self.get_reports_dataframe()

            return "Nh·∫•p v√†o n√∫t 'T·∫£i Markdown', 'T·∫£i PDF/HTML' ho·∫∑c 'X√≥a' ƒë·ªÉ t∆∞∆°ng t√°c v·ªõi b√°o c√°o", reports_data

        except Exception as e:
            print(f"L·ªói khi x·ª≠ l√Ω click b√°o c√°o: {str(e)}")
            return f"L·ªói khi x·ª≠ l√Ω: {str(e)}", reports_data

    def reports_select_handler(self, evt: gr.SelectData):
        """
        X·ª≠ l√Ω s·ª± ki·ªán khi ng∆∞·ªùi d√πng ch·ªçn m·ªôt b√°o c√°o trong danh s√°ch
        
        Args:
            evt: S·ª± ki·ªán SelectData t·ª´ Gradio
            
        Returns:
            Tuple (message, updated_reports_dataframe, file_path)
        """
        try:
            reports_data = self.get_reports_dataframe()
            result, updated_df = self.handle_reports_click(evt, reports_data)

            # Ki·ªÉm tra xem k·∫øt qu·∫£ c√≥ ph·∫£i ƒë∆∞·ªùng d·∫´n t·∫£i xu·ªëng kh√¥ng
            if isinstance(result, str) and result.startswith("File ") and "s·∫µn s√†ng t·∫£i xu·ªëng:" in result:
                # Tr√≠ch xu·∫•t ƒë∆∞·ªùng d·∫´n file
                file_path = result.split("s·∫µn s√†ng t·∫£i xu·ªëng:")[1].strip()
                if os.path.exists(file_path):
                    # T·∫°o m·ªôt ƒë∆∞·ªùng d·∫´n t·∫°m th·ªùi cho Gradio ƒë·ªÉ t·∫°o li√™n k·∫øt t·∫£i xu·ªëng
                    return f"T·∫£i xu·ªëng b√°o c√°o: {os.path.basename(file_path)}", updated_df, file_path

            return result, updated_df, None
        except Exception as e:
            print(f"L·ªói x·ª≠ l√Ω s·ª± ki·ªán select: {e}")
            return f"L·ªói: {str(e)}", self.get_reports_dataframe(), None
