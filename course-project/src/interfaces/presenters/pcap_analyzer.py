"""
PCAPAnalyzer - Ph√¢n t√≠ch file PCAP v√† ƒë·ªãnh d·∫°ng k·∫øt qu·∫£ cho UI.
"""
from typing import Dict, Tuple
import os
import pandas as pd
from src.interfaces.presenters.chart_creator import ChartCreator
# T·∫°o instance SmolagentGateway n·∫øu ch∆∞a c√≥
from src.interfaces.gateways.smolagent_gateway import SmolagentGateway

class PCAPAnalyzer:
    """Ph√¢n t√≠ch file PCAP v√† ƒë·ªãnh d·∫°ng k·∫øt qu·∫£ cho UI."""
    
    def __init__(self, controller, chart_creator: ChartCreator = None):
        """
        Kh·ªüi t·∫°o PCAP analyzer.
        
        Args:
            controller: Controller ƒë·ªÉ ph√¢n t√≠ch PCAP
            chart_creator: ƒê·ªëi t∆∞·ª£ng ChartCreator ƒë·ªÉ t·∫°o bi·ªÉu ƒë·ªì
        """
        self.controller = controller
        self.chart_creator = chart_creator or ChartCreator()
        self.latest_pcap_file = None
        self.latest_results = None
    
    def analyze_pcap(self, pcap_file) -> Tuple:
        """
        Ph√¢n t√≠ch file pcap v√† ƒë·ªãnh d·∫°ng k·∫øt qu·∫£ cho UI.
        
        Args:
            pcap_file: File PCAP ƒë·ªÉ ph√¢n t√≠ch
            
        Returns:
            Tuple (summary, attack_table, protocol_chart, attack_chart, flow_graph, tcp_visualizations, initial_chat_message)
        """
        if not pcap_file:
            empty_chart = self.chart_creator._create_empty_chart("Kh√¥ng c√≥ d·ªØ li·ªáu")
            return "Kh√¥ng t√¨m th·∫•y file PCAP.", pd.DataFrame(), empty_chart, empty_chart, empty_chart, empty_chart, None

        # L∆∞u th√¥ng tin v·ªÅ file hi·ªán t·∫°i
        file_path = pcap_file.name if hasattr(pcap_file, 'name') else pcap_file
        self.latest_pcap_file = file_path

        try:
            # Ph√¢n t√≠ch file pcap
            results = self.controller.analyze_pcap_file(file_path)
            self.latest_results = results

            # ƒê·ªãnh d·∫°ng k·∫øt qu·∫£ ƒë·ªÉ hi·ªÉn th·ªã
            summary = self._create_summary(file_path, results)

            # T·∫°o b·∫£ng t·∫•n c√¥ng
            attack_table = self._format_attack_table(results.get("attacks", []))

            # T·∫°o c√°c bi·ªÉu ƒë·ªì
            protocol_chart = self.chart_creator.create_protocol_chart(results)
            attack_chart = self.chart_creator.create_attack_severity_chart(results.get("attacks", []))
            flow_graph = self.chart_creator.create_flow_graph(results)
            tcp_visualizations = self.chart_creator.create_tcp_visualizations(results)

            # T·∫°o tin nh·∫Øn chat ban ƒë·∫ßu
            initial_chat_message = self._create_initial_chat_message(results)

            return summary, attack_table, protocol_chart, attack_chart, flow_graph, tcp_visualizations, initial_chat_message

        except Exception as e:
            # X·ª≠ l√Ω n·∫øu c√≥ l·ªói trong qu√° tr√¨nh ph√¢n t√≠ch
            error_message = f"## L·ªói khi ph√¢n t√≠ch file\n\n"
            error_message += f"Kh√¥ng th·ªÉ ph√¢n t√≠ch file: {str(e)}\n\n"
            error_message += "Vui l√≤ng ki·ªÉm tra l·∫°i file PCAP v√† th·ª≠ l·∫°i."

            empty_chart = self.chart_creator._create_empty_chart("L·ªói ph√¢n t√≠ch")

            # T·∫°o tin nh·∫Øn chat v·ªõi th√¥ng b√°o l·ªói
            error_chat = "ƒê√£ x·∫£y ra l·ªói khi ph√¢n t√≠ch file PCAP. Vui l√≤ng ki·ªÉm tra l·∫°i file v√† th·ª≠ l·∫°i."

            return (
                error_message,
                None,
                empty_chart,
                empty_chart,
                empty_chart,
                empty_chart,
                error_chat
            )
    
    def analyze_pcap_raw_packets(self, pcap_file, custom_prompt: str = None) -> str:
        """
        Ph√¢n t√≠ch file pcap s·ª≠ d·ª•ng ph∆∞∆°ng ph√°p ph√¢n t√≠ch g√≥i tin th√¥.
        
        Args:
            pcap_file: File PCAP ƒë·ªÉ ph√¢n t√≠ch
            custom_prompt: Prompt t√πy ch·ªânh ƒë·ªÉ h∆∞·ªõng d·∫´n AI ph√¢n t√≠ch
            
        Returns:
            K·∫øt qu·∫£ ph√¢n t√≠ch d∆∞·ªõi d·∫°ng chu·ªói vƒÉn b·∫£n
        """
        if not pcap_file:
            return "Kh√¥ng t√¨m th·∫•y file PCAP."

        # L∆∞u th√¥ng tin v·ªÅ file hi·ªán t·∫°i
        file_path = pcap_file.name if hasattr(pcap_file, 'name') else pcap_file
        self.latest_pcap_file = file_path

        try:
            # T·∫£i c√°c g√≥i tin th√¥ tr·ª±c ti·∫øp m√† kh√¥ng th·ª±c hi·ªán ph√¢n t√≠ch
            packets = self.controller.analyze_packet_use_case.packet_repository.load_pcap_file(file_path)

            smolagent_gateway = getattr(self.controller, 'smolagent_gateway', None)

            if not smolagent_gateway:
                smolagent_gateway = SmolagentGateway()
            
            # Ki·ªÉm tra t·ª´ kh√≥a trong prompt ƒë·ªÉ quy·∫øt ƒë·ªãnh lo·∫°i ph√¢n t√≠ch
            if custom_prompt and ("osi" in custom_prompt.lower() or "m√¥ h√¨nh osi" in custom_prompt.lower()):
                # S·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c ph√¢n t√≠ch theo m√¥ h√¨nh OSI
                result = smolagent_gateway.analyze_osi_raw_packets(packets, custom_prompt)
            else:
                # S·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c ph√¢n t√≠ch th√¥ng th∆∞·ªùng
                result = smolagent_gateway.analyze_raw_packets(packets, custom_prompt)
            
            # X·ª≠ l√Ω k·∫øt qu·∫£
            if isinstance(result, dict) and "analysis" in result:
                return result["analysis"]
            elif isinstance(result, str):
                return result
            else:
                return str(result)
        except Exception as e:
            # X·ª≠ l√Ω l·ªói
            error_message = f"## L·ªói khi ph√¢n t√≠ch file\n\n"
            error_message += f"Kh√¥ng th·ªÉ ph√¢n t√≠ch file: {str(e)}\n\n"
            error_message += "Vui l√≤ng ki·ªÉm tra l·∫°i file PCAP v√† th·ª≠ l·∫°i."
            return error_message
    
    def _create_summary(self, file_path: str, results: Dict) -> str:
        """
        T·∫°o t√≥m t·∫Øt t·ª´ k·∫øt qu·∫£ ph√¢n t√≠ch.
        
        Args:
            file_path: ƒê∆∞·ªùng d·∫´n ƒë·∫øn file PCAP
            results: K·∫øt qu·∫£ ph√¢n t√≠ch
            
        Returns:
            Chu·ªói t√≥m t·∫Øt k·∫øt qu·∫£ ph√¢n t√≠ch
        """
        summary = f"## K·∫øt qu·∫£ ph√¢n t√≠ch\n\n"
        summary += f"File: {os.path.basename(file_path)}\n\n"

        if "attack_count" in results:
            if results["attack_count"] > 0:
                summary += f"‚ö†Ô∏è **Ph√°t hi·ªán {results['attack_count']} cu·ªôc t·∫•n c√¥ng!**\n\n"
            else:
                summary += "‚úÖ **Kh√¥ng ph√°t hi·ªán t·∫•n c√¥ng n√†o.**\n\n"

        # Th√™m th·ªëng k√™ lu·ªìng
        if "flow_statistics" in results:
            flow_stats = results["flow_statistics"]
            summary += f"- T·ªïng s·ªë lu·ªìng: {flow_stats.get('total_flows', 0)}\n"
            summary += f"- Lu·ªìng ƒë√£ thi·∫øt l·∫≠p: {flow_stats.get('established_count', 0)}\n"
            summary += f"- Lu·ªìng b·ªã ƒë·∫∑t l·∫°i: {flow_stats.get('reset_count', 0)}\n"
            
        return summary
    
    def _format_attack_table(self, attacks: list) -> pd.DataFrame:
        """
        ƒê·ªãnh d·∫°ng danh s√°ch t·∫•n c√¥ng th√†nh DataFrame.
        
        Args:
            attacks: Danh s√°ch c√°c t·∫•n c√¥ng
            
        Returns:
            DataFrame ch·ª©a th√¥ng tin t·∫•n c√¥ng
        """
        if not attacks:
            return pd.DataFrame()
        
        # T·∫°o danh s√°ch c√°c m·ª•c
        formatted_attacks = []
        for attack in attacks:
            formatted_attack = {
                "Lo·∫°i t·∫•n c√¥ng": attack.get("attack_type", "Unknown"),
                "M·ª©c ƒë·ªô nghi√™m tr·ªçng": attack.get("severity", 0),
                "Th·ªùi gian": attack.get("timestamp", "N/A"),
                "Ngu·ªìn": attack.get("src_ip", "unknown"),
                "ƒê√≠ch": attack.get("dst_ip", "unknown"),
                "Chi ti·∫øt": attack.get("description", "Kh√¥ng c√≥ m√¥ t·∫£ chi ti·∫øt")
            }
            formatted_attacks.append(formatted_attack)
            
        # T·∫°o DataFrame t·ª´ danh s√°ch
        df = pd.DataFrame(formatted_attacks)
        
        # S·∫Øp x·∫øp theo m·ª©c ƒë·ªô nghi√™m tr·ªçng
        if not df.empty and "M·ª©c ƒë·ªô nghi√™m tr·ªçng" in df.columns:
            df = df.sort_values(by="M·ª©c ƒë·ªô nghi√™m tr·ªçng", ascending=False)
            
        return df
    
    def _create_initial_chat_message(self, results: Dict) -> str:
        """
        T·∫°o tin nh·∫Øn chat ban ƒë·∫ßu.
        
        Args:
            results: K·∫øt qu·∫£ ph√¢n t√≠ch PCAP
            
        Returns:
            Tin nh·∫Øn chat ban ƒë·∫ßu
        """
        message = "Ch√†o b·∫°n! T√¥i ƒë√£ ph√¢n t√≠ch xong file PCAP c·ªßa b·∫°n.\n\n"
        message += "**T·ªïng quan v·ªÅ an ninh m·∫°ng:**\n\n"

        # Ph√¢n t√≠ch c√°c r·ªßi ro c∆° b·∫£n
        risks_found = False

        # Ki·ªÉm tra t·∫•n c√¥ng
        attacks = results.get("attacks", [])
        if attacks:
            message += f"‚ö†Ô∏è **Ph√°t hi·ªán {len(attacks)} cu·ªôc t·∫•n c√¥ng!** ƒê√¢y l√† r·ªßi ro an ninh cao c·∫ßn x·ª≠ l√Ω ngay.\n\n"
            risks_found = True

            # Ki·ªÉm tra t·∫•n c√¥ng ARP ƒë·∫∑c bi·ªát
            arp_attacks = [a for a in attacks if "ARP" in a.get("attack_type", "")]
            if arp_attacks:
                gateway_attacks = [a for a in arp_attacks if any(ip.endswith(".1") or ip.endswith(".254") for ip in a.get("target_ips", []))]

                if gateway_attacks:
                    message += f"üö® **NGUY HI·ªÇM: Ph√°t hi·ªán {len(gateway_attacks)} t·∫•n c√¥ng ARP nh·∫Øm v√†o gateway!**\n"
                    message += "ƒê√¢y l√† d·∫•u hi·ªáu c·ªßa t·∫•n c√¥ng Man-in-the-Middle c√≥ th·ªÉ ƒë√°nh c·∫Øp th√¥ng tin nh·∫°y c·∫£m.\n\n"
                else:
                    message += f"‚ö†Ô∏è **Ph√°t hi·ªán {len(arp_attacks)} t·∫•n c√¥ng ARP spoofing** c√≥ th·ªÉ d·∫´n ƒë·∫øn t·∫•n c√¥ng Man-in-the-Middle.\n\n"
        else:
            message += "‚úÖ **Kh√¥ng ph√°t hi·ªán t·∫•n c√¥ng n√†o.** ƒêi·ªÅu n√†y t·ªët cho an ninh m·∫°ng c·ªßa b·∫°n.\n\n"

        # Ki·ªÉm tra t·ªâ l·ªá k·∫øt n·ªëi TCP ƒë·∫∑t l·∫°i
        if "flow_statistics" in results:
            flow_stats = results["flow_statistics"]
            total_flows = flow_stats.get("total_flows", 0)
            reset_count = flow_stats.get("reset_count", 0)

            if total_flows > 0:
                reset_percent = (reset_count / total_flows) * 100
                if reset_percent > 20:
                    message += f"‚ö†Ô∏è **T·ª∑ l·ªá k·∫øt n·ªëi ƒë·∫∑t l·∫°i cao: {reset_percent:.1f}%** - C√≥ th·ªÉ c√≥ v·∫•n ƒë·ªÅ v·ªÅ hi·ªáu su·∫•t m·∫°ng.\n\n"
                    risks_found = True

        # T√≥m t·∫Øt r·ªßi ro
        if risks_found:
            message += "C√≥ m·ªôt s·ªë r·ªßi ro m·∫°ng c·∫ßn ƒë∆∞·ª£c xem x√©t. H√£y h·ªèi t√¥i v·ªÅ 'ph√¢n t√≠ch r·ªßi ro m·∫°ng' ƒë·ªÉ bi·∫øt chi ti·∫øt.\n\n"
        else:
            message += "M·∫°ng c·ªßa b·∫°n c√≥ v·∫ª an to√†n d·ª±a tr√™n d·ªØ li·ªáu ƒë√£ ph√¢n t√≠ch. Tuy nhi√™n, vi·ªác gi√°m s√°t li√™n t·ª•c r·∫•t quan tr·ªçng.\n\n"

        # Th√™m h∆∞·ªõng d·∫´n t∆∞∆°ng t√°c
        message += "B·∫°n c√≥ th·ªÉ h·ªèi t√¥i v·ªÅ:\n"
        message += "- Ph√¢n t√≠ch r·ªßi ro m·∫°ng\n"
        message += "- Chi ti·∫øt v·ªÅ c√°c cu·ªôc t·∫•n c√¥ng\n"
        message += "- Ph√¢n t√≠ch l∆∞u l∆∞·ª£ng m·∫°ng theo m√¥ h√¨nh OSI\n"

        # Th√™m g·ª£i √Ω v·ªÅ ARP n·∫øu c√≥ t·∫•n c√¥ng ARP
        if attacks and any("ARP" in a.get("attack_type", "") for a in attacks):
            message += "- Th√¥ng tin v·ªÅ t·∫•n c√¥ng ARP spoofing\n"

        message += "- Bi·ªán ph√°p gi·∫£m thi·ªÉu r·ªßi ro\n"

        return message 